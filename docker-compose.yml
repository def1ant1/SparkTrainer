version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sparktrainer-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sparktrainer
      - POSTGRES_USER=sparktrainer
      - POSTGRES_PASSWORD=sparktrainer_dev_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sparktrainer"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: sparktrainer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.9.2
    container_name: sparktrainer-mlflow
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://sparktrainer:sparktrainer_dev_pass@postgres:5432/sparktrainer
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://sparktrainer:sparktrainer_dev_pass@postgres:5432/sparktrainer
      --default-artifact-root /mlflow/artifacts
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dgx-ai-trainer-backend
    ports:
      - "5000:5000"
    volumes:
      - ./jobs:/app/jobs
      - ./models:/app/models
      - ./logs:/app/logs
      - ./training_scripts:/app/training_scripts
      - ./src:/app/src
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
      - DGX_TRAINER_BASE_DIR=/app
      - DATABASE_URL=postgresql://sparktrainer:sparktrainer_dev_pass@postgres:5432/sparktrainer
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Enable GPU access with modern Compose
    gpus: all
    restart: unless-stopped

  # Celery Worker for Training Jobs
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sparktrainer-celery-worker
    command: celery -A celery_app.celery worker --loglevel=info --concurrency=2
    volumes:
      - ./jobs:/app/jobs
      - ./models:/app/models
      - ./logs:/app/logs
      - ./training_scripts:/app/training_scripts
      - ./src:/app/src
    environment:
      - PYTHONUNBUFFERED=1
      - DGX_TRAINER_BASE_DIR=/app
      - DATABASE_URL=postgresql://sparktrainer:sparktrainer_dev_pass@postgres:5432/sparktrainer
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Enable GPU access with modern Compose
    gpus: all
    restart: unless-stopped

  # Flower - Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sparktrainer-flower
    command: celery -A celery_app.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dgx-ai-trainer-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: dgx-ai-trainer-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sparktrainer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - backend
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sparktrainer-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=
    depends_on:
      - prometheus
    restart: unless-stopped

  # Node Exporter - System Metrics (optional but recommended)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sparktrainer-node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mlflow_artifacts:
  prometheus_data:
  grafana_data:
  jobs:
  models:
  logs:
