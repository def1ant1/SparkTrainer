name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'claude/**']
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy black isort
          pip install -r backend/requirements.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 backend/ src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 backend/ src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check backend/ src/

      - name: Check import sorting with isort
        run: |
          isort --check-only backend/ src/

      - name: Type check with mypy
        run: |
          mypy backend/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: sparktrainer
          POSTGRES_PASSWORD: sparktrainer
          POSTGRES_DB: sparktrainer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r backend/requirements.txt

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://sparktrainer:sparktrainer@localhost:5432/sparktrainer_test
        run: |
          cd backend
          alembic upgrade head

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://sparktrainer:sparktrainer@localhost:5432/sparktrainer_test
          REDIS_URL: redis://localhost:6379/0
          TESTING: 'true'
        run: |
          pytest tests/ --cov=src --cov=backend --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov/

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint
        working-directory: frontend
        run: npm run lint
        continue-on-error: true

      - name: Type check
        working-directory: frontend
        run: npm run type-check
        continue-on-error: true

      - name: Run tests
        working-directory: frontend
        run: npm test
        continue-on-error: true

      - name: Build
        working-directory: frontend
        run: npm run build

  smoke-test-recipe:
    name: Smoke Test Training Recipe
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -e .

      - name: Create test dataset
        run: |
          mkdir -p datasets/test
          cat > datasets/test/train.jsonl << 'EOF'
          {"text": "The capital of France is Paris."}
          {"text": "Python is a programming language."}
          {"text": "Machine learning is a subset of AI."}
          EOF

      - name: Run recipe smoke test (CPU mode)
        run: |
          python -m spark_trainer.recipes.text_lora \
            --dataset datasets/test/train.jsonl \
            --model_name "gpt2" \
            --output_dir outputs/test \
            --max_steps 5 \
            --batch_size 1 \
            --logging_steps 1 \
            --save_steps 5 \
            --eval_steps 5 \
            --cpu_only
        continue-on-error: true

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: false
          tags: sparktrainer/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: false
          tags: sparktrainer/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-docker]

    steps:
      - uses: actions/checkout@v4

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5001/healthz; do sleep 2; done'

      - name: Run API integration tests
        run: |
          curl -f http://localhost:5001/healthz
          curl -f http://localhost:5001/readyz
          curl -f http://localhost:5001/api/jobs
        continue-on-error: true

      - name: Check service logs
        if: failure()
        run: |
          docker-compose -f docker-compose.test.yml logs

      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  sdk-tests:
    name: Test SDKs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test Python SDK
        run: |
          cd sdk/python
          pip install -e .
          pip install pytest
          pytest tests/ || echo "No tests yet"
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Test TypeScript SDK
        run: |
          cd sdk/typescript
          npm install
          npm run build
          npm test || echo "No tests yet"
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install sphinx sphinx-rtd-theme myst-parser

      - name: Build docs
        run: |
          # Generate OpenAPI spec
          cd backend
          python openapi_spec.py
        continue-on-error: true

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            backend/openapi.yaml
            docs/

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-backend, test-frontend, smoke-test-recipe, integration-test, sdk-tests, security-scan, docs]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "CI Pipeline completed!"
          echo "Lint and Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Smoke Test: ${{ needs.smoke-test-recipe.result }}"
          echo "Integration Test: ${{ needs.integration-test.result }}"
          echo "SDK Tests: ${{ needs.sdk-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Documentation: ${{ needs.docs.result }}"
